<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TradeLinkAppKit</name>
    </assembly>
    <members>
        <member name="T:TradeLink.AppKit.AppTracker">
            <summary>
            record application custom application events, mouse-clicks, etc to a URL
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.AppTracker.Track(TradeLink.AppKit.TrackType)">
            <summary>
            track an event
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:TradeLink.AppKit.AppTracker.Track(TradeLink.AppKit.TrackType,System.String)">
            <summary>
            track an event with custom data
            </summary>
            <param name="type"></param>
            <param name="data"></param>
        </member>
        <member name="M:TradeLink.AppKit.AppTracker.Track(TradeLink.AppKit.TrackType,System.Decimal)">
            <summary>
            track a numeric event
            </summary>
            <param name="t"></param>
            <param name="val"></param>
        </member>
        <member name="M:TradeLink.AppKit.AppTracker.Score(System.Decimal)">
            <summary>
            track a score update
            </summary>
            <param name="points"></param>
        </member>
        <member name="P:TradeLink.AppKit.AppTracker.TrackUrl">
            <summary>
            url to post requests
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.AppTracker.Program">
            <summary>
            program to post as
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.AppTracker.AutoStartStop">
            <summary>
            send start and stop actions automatically at load and form close
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.AppTracker.TrackEnabled">
            <summary>
            enable or disable server tracking (debugging still tracked)
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.AppTracker.PushTracksOnClose">
            <summary>
            push any untracked events when form is closed
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.AppTracker.PushTracksCloseMax">
            <summary>
            maximum number of attempts to push tracks on close
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.AppTracker.InterTrackSleep">
            <summary>
            wait between tracks
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.AppTracker.UnprocessedItemCount">
            <summary>
            count of unprocessed items
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.AppTracker.TrackClicks">
            <summary>
            track mouse clicks as apptracker events
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.AppTracker.TrackCount">
            <summary>
            count of how many events/actions have been tracked in total for this session
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaComment.GetComments(System.String,System.String,System.String,System.Int32)">
            <summary>
            get comments on a ticket
            </summary>
            <param name="space"></param>
            <param name="user"></param>
            <param name="pw"></param>
            <param name="ticketnum"></param>
            <returns></returns>
        </member>
        <member name="T:TradeLink.AppKit.AssemblaDocument">
            <summary>
            this class is for working with assembla documents.
            see : https://www.assembla.com/wiki/show/breakoutdocs/Document_REST_API
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaMilestone.DeleteMilestone(System.String,System.String,TradeLink.AppKit.AssemblaMilestone)">
            <summary>
            delete a milestone given a valid milestone instance
            </summary>
            <param name="space"></param>
            <param name="user"></param>
            <param name="password"></param>
            <param name="milestone"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaMilestone.GetMilestones(System.String,System.String,System.String)">
            <summary>
            get list of all milestones on a space
            </summary>
            <param name="space"></param>
            <param name="user"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaMilestone.Create(System.String,System.String,System.String,System.String)">
            <summary>
            create milestone
            </summary>
            <param name="space"></param>
            <param name="user"></param>
            <param name="password"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaMilestone.Create(System.String,System.String,System.String,System.String,System.String,TradeLink.API.DebugDelegate)">
            <summary>
            create a milestone
            </summary>
            <param name="space"></param>
            <param name="user"></param>
            <param name="password"></param>
            <param name="name"></param>
            <param name="description"></param>
            <param name="deb"></param>
            <returns></returns>
        </member>
        <member name="P:TradeLink.AppKit.AssemblaMilestone.Name">
            <summary>
            name of milestone
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.AssemblaMilestone.Space">
            <summary>
            space that owns milestone
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.AssemblaMilestone.isCompleted">
            <summary>
            whether milestone is still open
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.AssemblaMilestone.Id">
            <summary>
            id of milestone
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.AssemblaMilestone.Desc">
            <summary>
            description of milestone
            </summary>
        </member>
        <member name="T:TradeLink.AppKit.AssemblaSpace">
            <summary>
            obtain information on portal spaces
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaSpace.GetSpaces(System.String,System.String)">
            <summary>
            get list of spaces for an account
            </summary>
            <param name="user"></param>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="P:TradeLink.AppKit.AssemblaSpace.isValid">
            <summary>
            whether space is valid
            </summary>
        </member>
        <member name="T:TradeLink.AppKit.AssemblaTicket">
            <summary>
            create and modify assembla tickets
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaTicket.Create(System.String,System.String,System.String,System.String)">
            <summary>
            returns global id of ticket if successful, zero if not successful
            (global id does not equal space's ticket id)
            </summary>
            <param name="space"></param>
            <param name="user"></param>
            <param name="password"></param>
            <param name="summary"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaTicket.UpdateComment(System.String,System.String,System.String,System.Int32,System.String)">
            <summary>
            see https://www.assembla.com/wiki/show/breakoutdocs/Ticket_REST_API
            for example of valid xml updates
            </summary>
            <param name="space"></param>
            <param name="user"></param>
            <param name="password"></param>
            <param name="ticket"></param>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaTicket.#ctor(System.String,System.String)">
            <summary>
            create a new assembla ticket
            </summary>
            <param name="summary"></param>
            <param name="desc"></param>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaTicket.#ctor(System.String,System.String,TradeLink.API.Priority,TradeLink.API.TicketStatus)">
            <summary>
            create a new assembla ticket
            </summary>
            <param name="summary"></param>
            <param name="desc"></param>
            <param name="pri"></param>
            <param name="stat"></param>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaTicket.#ctor(System.String,System.String,System.String,System.String,System.String,TradeLink.API.Priority,TradeLink.API.TicketStatus)">
            <summary>
            create a new assembla ticket in a given space using a given account
            </summary>
            <param name="space"></param>
            <param name="username"></param>
            <param name="pw"></param>
            <param name="summary"></param>
            <param name="desc"></param>
            <param name="pri"></param>
            <param name="stat"></param>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaTicket.TicketContext">
            <summary>
            get extra information about this machine (formatted)
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaTicket.TicketContext(System.String)">
            <summary>
            get extra information about this machine (formatted)
            </summary>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaTicket.TicketContext(System.String,System.Exception)">
            <summary>
            get extra information about this machine (formatted)
            </summary>
            <param name="program"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaTicket.TicketContext(System.String,System.String,System.Exception)">
            <summary>
            get a formatted description of information about this machine
            </summary>
            <param name="space"></param>
            <param name="program"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaTicket.GetTickets(System.String,System.String,System.String,TradeLink.API.DebugDelegate)">
            <summary>
            get list of tickets on space (limited to first 1000)
            </summary>
            <param name="space"></param>
            <param name="user"></param>
            <param name="pw"></param>
            <returns></returns>
        </member>
        <member name="P:TradeLink.AppKit.AssemblaTicket.isValid">
            <summary>
            true if given ticket is valid
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.AssemblaTicketControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaTicketControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaTicketControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.AssemblaTicketWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaTicketWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaTicketWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaUtil.UploadTodaysTicks(System.String,System.String,System.String,System.Int32,System.String,TradeLink.API.DebugDelegate)">
            <summary>
            upload todays tickdata to a portal
            </summary>
            <param name="space"></param>
            <param name="un"></param>
            <param name="pw"></param>
            <param name="ticket"></param>
            <param name="workpath"></param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaUtil.ZipFile(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            zip together a bunch of files
            </summary>
            <param name="zipfilepath"></param>
            <param name="filepaths"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.AssemblaUtil.ZipFile(System.String,System.Collections.Generic.List{System.String},System.String,TradeLink.API.DebugDelegate)">
            <summary>
            zip together a bunch of files, using specified path in the zip file
            </summary>
            <param name="zipfilepath"></param>
            <param name="filepaths"></param>
            <param name="prependpath"></param>
            <param name="debug"></param>
            <returns></returns>
        </member>
        <member name="T:TradeLink.AppKit.Auth">
            <summary>
            authenticate username/url/key to 'allow list' url
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.Auth.AuthFile">
            <summary>
            default name for authorization file
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.Auth.#ctor(System.String)">
            <summary>
            authenicate using given url
            </summary>
            <param name="authurl"></param>
        </member>
        <member name="M:TradeLink.AppKit.Auth.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            authenticate using url and login via http to said url, look for identification in default location for program
            </summary>
            <param name="authurl"></param>
            <param name="useHttpAuth"></param>
            <param name="program"></param>
        </member>
        <member name="M:TradeLink.AppKit.Auth.#ctor(System.String,System.String)">
            <summary>
            authenticate using url and login via http to said url, using specified http authentication file
            </summary>
            <param name="authurl"></param>
            <param name="authfilepath"></param>
        </member>
        <member name="M:TradeLink.AppKit.Auth.#ctor(System.String,System.String,System.Int32)">
            <summary>
            authenticate using url and login via http to said url, using specified http authentication file and specified expiration.
            </summary>
            <param name="authurl"></param>
            <param name="authfilepath"></param>
            <param name="expireAfterSeconds"></param>
        </member>
        <member name="M:TradeLink.AppKit.Auth.#ctor(System.String,System.Int32)">
            <summary>
            authenticate using given url and expire authenticates 
            </summary>
            <param name="authUrl"></param>
            <param name="expireAfterSeconds"></param>
        </member>
        <member name="M:TradeLink.AppKit.Auth.#ctor(System.String,System.String,System.String)">
            <summary>
            authenticate using given url, username and password with no expiration
            </summary>
            <param name="authUrl"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:TradeLink.AppKit.Auth.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            authenticate using given url, username/password and expiration settings
            </summary>
            <param name="authUrl"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="expireAfterSeconds"></param>
        </member>
        <member name="M:TradeLink.AppKit.Auth.isAuthorized">
            <summary>
            see if we're authorized on this machine
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.Auth.isAuthorized(System.String)">
            <summary>
            see if a given key is authorized
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.Auth.isAuthorized(System.String,System.Boolean)">
            <summary>
            see if a given key is authorized, display dialog box and determine whether dialog box should pause program execution (eg if running on background thread which might terminate otherwise)
            </summary>
            <param name="key"></param>
            <param name="pause"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.Auth.isAuthorized(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            see if given key is authorized
            </summary>
            <param name="key">key</param>
            <param name="appendrandom">whether random parameter is appended to url to prevent results caching</param>
            <param name="throwexception">throw exceptions on errors</param>
            <param name="showerrorbox">show registration dialog if not authorized</param>
            <param name="pause">pause execution when showing dialog</param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.Auth.GetCPUId">
            <summary>
            Return processorId from first CPU in machine
            (some hardvendors use duplicate cpu ids)
            </summary>
            <returns>[string] ProcessorId</returns>
        </member>
        <member name="M:TradeLink.AppKit.Auth.GetNetworkAddress">
            <summary>
            get network address
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.Auth.GetHDDSerial">
            <summary>
            get hard disk drive serial number
            </summary>
            <returns></returns>
        </member>
        <member name="P:TradeLink.AppKit.Auth.ExpireSeconds">
            <summary>
            number of seconds this authorization is good for before must be reauthorized
            (0 if not used)
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.Auth.isValid">
            <summary>
            returns true if authorization has passed and not expired
            </summary>
        </member>
        <member name="E:TradeLink.AppKit.Auth.SendDebug">
            <summary>
            get debugging message from authentication
            </summary>
        </member>
        <member name="T:TradeLink.AppKit.AuthInfo">
            <summary>
            hold authentication information.
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.AuthInfo.Program">
            <summary>
            program
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.AuthInfo.Username">
            <summary>
            username
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.AuthInfo.Password">
            <summary>
            password
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.AuthInfo.GetAuthInfo(System.String)">
            <summary>
            get authentication information from a file with username in first line and password in the second.
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.AuthInfo.GetProgramAuth(System.String)">
            <summary>
            get authentication information in the program path of PROGRAM
            </summary>
            <param name="PROGRAM"></param>
            <returns></returns>
        </member>
        <member name="P:TradeLink.AppKit.AuthInfo.isValid">
            <summary>
            isvalid auth information
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.AuthInfoPrompt.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.AuthInfoPrompt.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.AuthInfoPrompt.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.BookControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.BookControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.BookControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.BookControl.RefreshEvery">
            <summary>
            refresh grid every X updates
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.BookView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.BookView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.BookView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.Chart.#ctor(TradeLink.API.BarList,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TradeLink.AppKit.Chart"/> class.
            </summary>
            <param name="b">The barlist.</param>
            <param name="allowtype">if set to <c>true</c> [allowtype] will allow typing/changing of new symbols on the chart window.</param>
        </member>
        <member name="F:TradeLink.AppKit.Chart.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.Chart.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.Chart.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TradeLink.AppKit.BarListUpdated">
            <summary>
            Used to pass changes to barlists
            </summary>
        </member>
        <member name="T:TradeLink.AppKit.ChartControl">
            <summary>
            A generic charting form that plots BarList objects
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.ChartControl.newTick(TradeLink.API.Tick)">
            <summary>
            create bars from ticks
            </summary>
            <param name="k"></param>
        </member>
        <member name="M:TradeLink.AppKit.ChartControl.newPoint(System.String,System.Decimal,System.Int32,System.Int32,System.Int32)">
            <summary>
            create bars from points
            </summary>
            <param name="p"></param>
            <param name="time"></param>
            <param name="date"></param>
            <param name="size"></param>
        </member>
        <member name="M:TradeLink.AppKit.ChartControl.redraw">
            <summary>
            force a manual refresh of the chart
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.ChartControl.Reset">
            <summary>
            reset the chart and underlying data structures
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.ChartControl.#ctor(TradeLink.API.BarList,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TradeLink.AppKit.Chart"/> class.
            </summary>
            <param name="b">The barlist.</param>
            <param name="allowtype">if set to <c>true</c> [allowtype] will allow typing/changing of new symbols on the chart window.</param>
        </member>
        <member name="F:TradeLink.AppKit.ChartControl.isYLabelsDisplayed">
            <summary>
            whether price labels are displayed
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.ChartControl.isYLinesDisplayed">
            <summary>
            whether horizontal price lines are drawn
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.ChartControl.isXLabelsDisplayed">
            <summary>
            whether x axis is labeled (with dates)
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.ChartControl.isAxesDisplayed">
            <summary>
            whether x and y axes are drawn
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.ChartControl.MinPrice">
            <summary>
            used to control smallest possible price allowed on chart
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.ChartControl.DrawChartLabel(System.Decimal,System.Int32,System.String,System.Drawing.Color)">
            <summary>
            draws text label on a chart.
            if price is less than zero (MinPrice), all labels are cleared.
            </summary>
            <param name="price"></param>
            <param name="bar"></param>
            <param name="label"></param>
        </member>
        <member name="M:TradeLink.AppKit.ChartControl.IdentifyOscilatorColors(System.Drawing.Color[])">
            <summary>
            tell chart which colors represent oscilators, so no seperate call is needed
            </summary>
            <param name="osc_colors"></param>
        </member>
        <member name="F:TradeLink.AppKit.ChartControl.MaxOsc">
            <summary>
            maximum oscilator value
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.ChartControl._minosc">
            <summary>
            minimum oscilator value
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.ChartControl.DrawOscLabel(System.Decimal,System.Int32,System.String,System.Drawing.Color)">
            <summary>
            draw an oscilator line/label
            </summary>
            <param name="osc"></param>
            <param name="time"></param>
            <param name="label"></param>
            <param name="color"></param>
        </member>
        <member name="F:TradeLink.AppKit.ChartControl.OscHeightPct">
            <summary>
            percentage of the price window the oscilator can use (.25 = 25%, 0 = disable)
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.ChartControl.OscTransparency">
            <summary>
            amount of transparency for oscilator lines (1 = transparent, 0 = opaque)
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.ChartControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.ChartControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.ChartControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.ChartControl.AutoUpdate">
            <summary>
            if set, control will autorefresh with each tick.
            otherwise, refresh must be called manually.
            manual is recommended during rapid updates, as the chart may flash otherwise.
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.ChartControl.DisplayRightClick">
            <summary>
            controls whether right click menu can be selected
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.ChartControl.Title">
            <summary>
            Gets the title of this chart.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:TradeLink.AppKit.ChartControl.ManualColor">
            <summary>
            color used for manual chart drawings
            </summary>
        </member>
        <member name="T:TradeLink.AppKit.CrashReport">
            <summary>
            display a tradelink crash window rather than standard windows form.
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.CrashReport.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.CrashReport.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.CrashReport.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.DebugControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.DebugControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.DebugControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.DebugControl.UseExternalTimeStamp">
            <summary>
            toggle whether an external time stamp is used (timestamps must be enabled)
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.DebugControl.ExternalTimeStamp">
            <summary>
            set an external time stamp
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.DebugWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.DebugWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.DebugWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.DebugWindow.UseExternalTimeStamp">
            <summary>
            toggle whether an external time stamp is used (timestamps must be enabled)
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.DebugWindow.ExternalTimeStamp">
            <summary>
            set an external time stamp
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.Reset">
            <summary>
            clears and resets the grid settings
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightadddump2clipboard">
            <summary>
            adds option to dump serialized models to right click menu
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightexportselobject(System.String)">
            <summary>
            dumps a serialized version of selected objects to clipboard
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightselectedsymclip(System.String)">
            <summary>
            copies symbol column values of all selected models to clipboard
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddsymclipall">
            <summary>
            adds right click option to copy allsymbols to clipboard
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddsymclipsel">
            <summary>
            adds right click option to copy selected ymbols to clipboard
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.openprogram(System.String[],System.String,System.Boolean)">
            <summary>
            opens a program and passes a list of symbols as an argument
            </summary>
            <param name="symbols"></param>
            <param name="program"></param>
            <param name="allsymsinoneshot">whether one instance of program can handle all symbols</param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightadddebugtogrequest">
            <summary>
            add right click option to request hiding/showing of debug window
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.toggledebugrequest(System.String)">
            <summary>
            request hidding showing of debug window
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddclip(System.String)">
            <summary>
            adds models for any symbols in clipboard to the view
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddsym_user">
            <summary>
            adds right click option to prompt users for symbols
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddsym_user_raw">
            <summary>
            adds right click option that prompts user for symbols and disables parsing of those symbols
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddsym_clip">
            <summary>
            adds right click option to add symbols from clipboard
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddsym_user(System.String)">
            <summary>
            prompts user for symbols to create models for
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddsym_user_raw(System.String)">
            <summary>
            require that symbol entered are treated in raw form
            </summary>
            <param name="clicktext"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.getmodels">
            <summary>
            override this method to supply models to the grid, whenever symbols are added 
            (symbols added via addsymsnow)
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.addsymsnow">
            <summary>
            called by most of the symbol/model adding methods
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.addsymsnow_post">
            <summary>
            called when adding symbols, after models have been created and added to view
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.addsymbols(System.String[])">
            <summary>
            start a thread to add models for symbols to view
            </summary>
            <param name="symbols"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightallsymclip(System.String)">
            <summary>
            copies all model symbols to clipboard
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.righttogcache(System.String)">
            <summary>
            toggles caching flag (not used by default)
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="F:TradeLink.AppKit.GenericView`1.selectall">
            <summary>
            whether all objects have been selected by user
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.dv_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            implements default select all behavior
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.getgooglefinanceurl">
            <summary>
            gets google finance base url
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.getgooglesearchurl">
            <summary>
            gets general search url
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.getyahoofinanceurl">
            <summary>
            gets yahoo finance base url
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.getseekingalphaurl">
            <summary>
            gets seeking alpha base url
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.openbrowserurls(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            opens browser sessions for a list of queries (queries = symbols, company names, etc)
            </summary>
            <param name="urlappendquery"></param>
            <param name="baseurl"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddgooglesym">
            <summary>
            adds right click option to google finance selected symbols
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddyahoosym">
            <summary>
            adds right click menu to lookup symbol in yahoo finance
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightgoogleselected(System.String)">
            <summary>
            opens symbols in google finance
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightyahooselected(System.String)">
            <summary>
            opens symbols in yahoo finance
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddsep">
            <summary>
            adds seperate to right click menu
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightadd">
            <summary>
            reset current menu level
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightadd(System.String)">
            <summary>
            add a menu level
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightadd(System.String,TradeLink.API.DebugDelegate)">
            <summary>
            add a clickable item under most recent menu level
            </summary>
            <param name="name"></param>
            <param name="viewclick"></param>
        </member>
        <member name="F:TradeLink.AppKit.GenericView`1.DefaultTicketSize">
            <summary>
            default order size for an order ticket
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.CreateRightClick">
            <summary>
            default right click menu
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.ToItems(`0)">
            <summary>
            convert a model to an exportable format
            </summary>
            <param name="it"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.parsesymbols(System.String)">
            <summary>
            grab symbols from text
            </summary>
            <param name="symtext"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.parsesymbols(System.String,System.Boolean)">
            <summary>
            grab symols from text, control whether lowercase is allowed
            </summary>
            <param name="symtext"></param>
            <param name="toupper"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.getsymbols_popup">
            <summary>
            get a popup prompting user for symbols
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.getsymbols_popup(System.Boolean,System.Boolean)">
            <summary>
            get a popup prompting user for symbols, control whether lowercase allowed
            </summary>
            <param name="toupper"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.openchart(System.String)">
            <summary>
            open a chart for a symbol
            </summary>
            <param name="sym"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.openchart(System.Collections.Generic.List{System.String})">
            <summary>
            open chart for many symbols
            </summary>
            <param name="syms"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddopenchart">
            <summary>
            add right click option to open chart for selected symbols
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.openchartselected(System.String)">
            <summary>
            opens chart for selected symbols
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.getsymbolsclipboard">
            <summary>
            gets any symbols from clipboard
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.removesymbolheader(System.String[])">
            <summary>
            removes header row from symbols copied from clipboard
            </summary>
            <param name="syms"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.ToAllItems">
            <summary>
            dumps entire grid in an exportable format
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightexport(System.String)">
            <summary>
            exports entire grid to a csv file
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddremovesel">
            <summary>
            adds right click option to remove selected models
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddremoveall">
            <summary>
            add right click option to remove all models
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightclear(System.String)">
            <summary>
            removes all models (w/confirmation)
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.Clear">
            <summary>
            clear view
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddviewsall">
            <summary>
            add right click for all views
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddviewsall(System.Boolean)">
            <summary>
            add right click for all views with prev/next control
            </summary>
            <param name="prevandnext"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightaddsym_file">
            <summary>
            adds right click option to add symbols from file
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightsymfile(System.String)">
            <summary>
            adds models from symbols found in a file
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.getsymbols_file">
            <summary>
            gets symbols from a file chosen by user
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.rightremove(System.String)">
            <summary>
            removes selected symbols (w/user confirm)
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.debug(System.String)">
            <summary>
            send view debugging information
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.status(System.String)">
            <summary>
            send status info
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.selectallrows">
            <summary>
            select all models
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.selectallrows_clear">
            <summary>
            unselect all models
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.ToData(`0)">
            <summary>
            dump model as native/raw objects
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="F:TradeLink.AppKit.GenericView`1.modformatcols">
            <summary>
            holds formatting index (created by genericviewitem)
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.GenericView`1.formats">
            <summary>
            holds formatting information (created by genericviewitem)
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.addmodels(System.Collections.Generic.List{`0})">
            <summary>
            add models
            </summary>
            <param name="gts"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.addmodel(`0)">
            <summary>
            adds models
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.addmodel(`0,System.Boolean)">
            <summary>
            adds models with screen refresh control
            </summary>
            <param name="mod"></param>
            <param name="refresh"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.colfreeze_inc(System.String)">
            <summary>
            freezes more columsn
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.colfreeze_dec(System.String)">
            <summary>
            freezes fewer columns
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.ShowItems(`0)">
            <summary>
            show model
            </summary>
            <param name="model"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.ShowItems(System.Collections.Generic.List{`0})">
            <summary>
            show models
            </summary>
            <param name="Noms"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.ShowItems(System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
             show models with ability to clear previosu models
            </summary>
            <param name="Noms"></param>
            <param name="clearcurrent"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.refreshnow">
            <summary>
            refresh view now (force)
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.refreshnow(System.Boolean)">
            <summary>
            refresh now with control
            </summary>
            <param name="continuebatch"></param>
        </member>
        <member name="F:TradeLink.AppKit.GenericView`1.models">
            <summary>
            models used by view
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.genindex(System.Int32)">
            <summary>
            gets zero-based incremental index of given length
            </summary>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.initformat(System.Int32[],System.String[])">
            <summary>
            sets up view formatting
            </summary>
            <param name="modformats"></param>
            <param name="formats"></param>
        </member>
        <member name="F:TradeLink.AppKit.GenericView`1._enablecolors">
            <summary>
            whether coloring is used for negative numbers and percentages
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.GenericView`1.isSortAllowed">
            <summary>
            whether column sorting in the view is allowed
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.GenericView`1.DefaultDecimalPlaces">
            <summary>
            decimal places to display
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.GenericView`1.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.GenericView`1.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.GenericView`1.Owner">
            <summary>
            current user of this application
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.GenericView`1.isOwnerValid">
            <summary>
            whether current user is valid
            </summary>
        </member>
        <member name="E:TradeLink.AppKit.GenericView`1.SendDebugVisibleToggleEvent">
            <summary>
            listen to hide/show request sfor debug window
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.GenericView`1.VerboseDebugging">
            <summary>
            whether extended debugging is heard
            </summary>
        </member>
        <member name="E:TradeLink.AppKit.GenericView`1.SendOrderEvent">
            <summary>
            sends orders from view-originated tickets
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.GenericView`1.ViewName">
            <summary>
            name of this view
            (used when exporting models to files)
            </summary>
        </member>
        <member name="E:TradeLink.AppKit.GenericView`1.SendDebugEvent">
            <summary>
            listen to view debugging information
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.GenericView`1.Sleep">
            <summary>
            sleep (milliseconds) between option requests
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.GenericView`1.ColFreeze">
            <summary>
            freeze or unfree columns
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.GenericView`1.DecimalFormatDisplay">
            <summary>
            display decimals
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.GenericView`1.DecimalFormatExport">
            <summary>
            export decimals
            </summary>
        </member>
        <member name="T:TradeLink.AppKit.GenericViewItem`1">
            <summary>
            used to simplify mapping models to views
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:TradeLink.AppKit.GenericViewItem`1.itemformats">
            <summary>
            formats for importing and exporting
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.GenericViewItem`1.gridfmts">
            <summary>
            formats for display
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.GenericViewItem`1.fieldnames">
            <summary>
            object field mapping
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.GenericViewItem`1.itemnames">
            <summary>
            column/display name
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.GenericViewItem`1.itemtypes">
            <summary>
            type of the object field (autodetected)
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericViewItem`1.Clear">
            <summary>
            clear all viewitem information
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericViewItem`1.debug(System.String)">
            <summary>
            send debugging for view item
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericViewItem`1.status(System.String)">
            <summary>
            send status info
            </summary>
            <param name="msg"></param>
        </member>
        <member name="F:TradeLink.AppKit.GenericViewItem`1.VerboseDebugging">
            <summary>
            whether extended debugging is heard
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.GenericViewItem`1.v(System.String)">
            <summary>
            send extended debugging
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericViewItem`1.AddFormat(System.String)">
            <summary>
            defaults to a numeric grid format (eg N2)
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericViewItem`1.Add(System.String)">
            <summary>
            add column with field of same name and no formatting
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericViewItem`1.Add(System.String,System.String)">
            <summary>
            add column with field of different name, and no formatting
            </summary>
            <param name="name"></param>
            <param name="fieldname"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericViewItem`1.Add(System.String,System.String,System.String)">
            <summary>
            specify grid formatting
            </summary>
            <param name="name"></param>
            <param name="fieldname"></param>
            <param name="gridformat"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericViewItem`1.Add(System.String,System.String,System.String,System.String)">
            <summary>
            specify item (aka export) formatting
            </summary>
            <param name="name"></param>
            <param name="fieldname"></param>
            <param name="gridformat"></param>
            <param name="itemfmt"></param>
        </member>
        <member name="M:TradeLink.AppKit.GenericViewItem`1.Add(System.String,System.String,System.String,System.String,System.Type)">
            <summary>
            specify type explictly rather than autodetect
            </summary>
            <param name="name"></param>
            <param name="fieldname"></param>
            <param name="gridformat"></param>
            <param name="itemfmt"></param>
            <param name="t"></param>
        </member>
        <member name="P:TradeLink.AppKit.GenericViewItem`1.DimNames">
            <summary>
            names of each dimension
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.GenericViewItem`1.DimTypes">
            <summary>
            type of each dimension
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.GenericViewItem`1.DimFormats">
            <summary>
            format of each dimension when displayed as string/exportable
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.GenericViewItem`1.ItemType">
            <summary>
            type of this item
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.GenericViewItem`1.Count">
            <summary>
            count of items in this view definition
            </summary>
        </member>
        <member name="E:TradeLink.AppKit.GenericViewItem`1.SendDebugEvent">
            <summary>
            listen to errors and debugs from this view item
            </summary>
        </member>
        <member name="E:TradeLink.AppKit.GenericViewItem`1.SendStatusEvent">
            <summary>
            listen to status events
            </summary>
        </member>
        <member name="T:GCore.AsyncManager`2">
            <summary>
            Asynchronous operations manager class. For internal use only.
            </summary>
            <typeparam name="TFeed">Type of service feed.</typeparam>
            <typeparam name="TEntry">Type of service feed entry.</typeparam>
        </member>
        <member name="M:GCore.AsyncManager`2.AsyncDownloadAllFeeds(System.IAsyncResult)">
            <summary>
            Downloads all feed asynchronously from a Google service.
            </summary>
            <param name="result"><see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="M:GCore.AsyncManager`2.AsyncSubmitNewEntry(System.IAsyncResult)">
            <summary>
            Asynchronously submits new feed entry to Google service.
            </summary>
            <param name="result"><see cref="T:System.IAsyncResult"/> object.</param>
        </member>
        <member name="T:GCore.GWebAsyncData`2">
            <summary>
            Intermediate class to hold the state and data for asynchronous operations.
            For internal use only.
            </summary>
            <typeparam name="TFeed">Type of service feed.</typeparam>
            <typeparam name="TEntry">Type of service feed entry.</typeparam>
        </member>
        <member name="P:GCore.GWebAsyncData`2.Request">
            <summary>
            Gets and sets the <see cref="T:System.Net.WebRequest"/> object for the http request.
            </summary>
        </member>
        <member name="P:GCore.GWebAsyncData`2.FeedResult">
            <summary>
            Gets and sets the service feed obtained after async operation.
            </summary>
        </member>
        <member name="P:GCore.GWebAsyncData`2.EntryResult">
            <summary>
            Gets and sets the service feed entry obtained after async operation.
            </summary>
        </member>
        <member name="P:GCore.GWebAsyncData`2.ResetEvent">
            <summary>
            Gets and sets <seealso cref="T:System.Threading.ManualResetEvent"/> object for wait during async operations.
            </summary>
        </member>
        <member name="T:GCodeIssueTracker.ProjectHostingService">
            <example>
            <code>
            
            using System;
            using GCodeIssueTracker;
            using System.Net;
            using GCodeIssueTracker.Query;
            using System.Collections.Generic;
            using GCore;
            
            internal class Program
            {
               private static void Main()
               {
                    var service = new ProjectHostingService("demo")
                                     {
                                         GUserName = "someone@gmail.com",
                                         GPassword = "password123"
                                     };
                    // getting all issues
                    IssuesFeed resultFeed = service.GetAllIssues();
                    if (resultFeed != null) Console.WriteLine(resultFeed.Entries.Count);
                    
                    // submitting a new issue
                    var newEntry = new IssuesEntry
                                      {
                                          Author = new Author { Name = "someone" },
                                          Content = new Content { Type = "text", Description = "Test Issue Submission" },
                                          Owner = new Owner { UserName = "someother" },
                                          Status = "New",
                                          Title = "Test One",
                                          Labels = new List&lt;string&gt; { "Priority-Medium" },
                                          Ccs = new List&lt;Cc&gt; { new Cc { UserName = "another" } }
                                      };
                   int id = service.SubmitNewIssue(newEntry, "demoapp").Id;
                   Console.WriteLine(id);
                   
                   // querying using parameters
                   var query = new IssueQuery();
                   query.AppendQuery(QueryParamType.CanAll, "");
                   query.AppendQuery(QueryParamType.Author, "someauthor");
                   query.AppendQuery(QueryParamType.Label, "High");
                   query.AppendQuery(QueryParamType.MaxResults, "1000");
                   query.AppendQuery(QueryParamType.Owner, "someowner");
                   query.AppendQuery(QueryParamType.PublishedDateMax, Utility.ToFriendlyDateString(DateTime.Today));
                   query.AppendQuery(QueryParamType.PublishedDateMin, Utility.ToFriendlyDateString(DateTime.Today));
                   query.AppendQuery(QueryParamType.QueryString, "blogger");
                   query.AppendQuery(QueryParamType.Stars, "4");
                   query.AppendQuery(QueryParamType.Status, "Fixed");
                   query.AppendQuery(QueryParamType.UpdatedDateMax, Utility.ToFriendlyDateString(DateTime.Today));
                   query.AppendQuery(QueryParamType.UpdatedDateMin, Utility.ToFriendlyDateString(DateTime.MinValue));
                   Console.WriteLine(query.GetQueryUri());
                   
                   IssuesFeed resultFeed = service.Query&lt;IssuesFeed, IssuesEntry&gt;(query);
                   foreach (IssuesEntry item in resultFeed.Entries)
                   {
                       Console.WriteLine(item.Id);
                   }
                   Console.WriteLine("Total feed : " + resultFeed.Entries.Count);
               }
            }
            </code>
            </example>
            <summary>
            Google Code - project hosting service class.
            </summary>
            <remarks>This class cannot be extended.</remarks>
        </member>
        <member name="T:GCore.GService">
            <summary>
            Base Google Service class. This class generically gets all the feeds, inserts new feed entry, queries
            using parameters. All Google service class must be derived from this class. The member functions are
            only visible to the class which inherits this class.
            </summary>
        </member>
        <member name="M:GCore.GService.#ctor">
            <summary>
            Instantiate a new <see cref="T:GCore.GService"/> object.
            </summary>
        </member>
        <member name="M:GCore.GService.#ctor(System.String,System.String)">
            <summary>
            Instantiate a new <see cref="T:GCore.GService"/> object.
            </summary>
            <param name="userName">The Google account username.</param>
            <param name="password">The Google account password.</param>
        </member>
        <member name="M:GCore.GService.#ctor(System.String,System.String,System.Net.WebProxy)">
            <summary>
            Instantiate a new <see cref="T:GCore.GService"/> object.
            </summary>
            <param name="userName">The Google account username.</param>
            <param name="password">The Google account password.</param>
            <param name="proxy">Webproxy settings, if the application is behind a firewall.</param>
        </member>
        <member name="M:GCore.GService.GetAllFeed``2">
            <summary>
            Gets all feeds from <see cref="P:GCore.GService.GUrl"/> specified for a particular Google service.
            </summary>
            <typeparam name="TFeed">Type of atom feed for the service.</typeparam>
            <typeparam name="TEntry">Type of atom feed entry for the service.</typeparam>
            <returns>Atom feed for the paricular Google service</returns>
        </member>
        <member name="M:GCore.GService.SubmitNewEntry``2(``1,System.String)">
            <summary>
            Submits a new atom entry to a particular Google service.
            </summary>
            <typeparam name="TFeed">Type of feed for the service.</typeparam>
            <typeparam name="TEntry">Type of feed entry for the service.</typeparam>
            <param name="entry">The atom entry object containing the data to submit.</param>
            <param name="applicationName">The name of the application which invokes this method.</param>
            <returns>A new atom entry containing some additional data like id, published date etc.</returns>
        </member>
        <member name="M:GCore.GService.Query``2(GCore.IGQuery)">
            <summary>
            Queries a particular Google service using query parameters.
            </summary>
            <typeparam name="TFeed">Type of feed for the service.</typeparam>
            <typeparam name="TEntry">Type of feed entry for the service.</typeparam>
            <param name="query"><seealso cref="T:GCore.IGQuery"/> object, filled with data.</param>
            <returns>An atom feed for the particular Google service.</returns>
        </member>
        <member name="P:GCore.GService.ProxySettings">
            <summary>
            Gets and sets the proxy settings for the application.
            </summary>
        </member>
        <member name="P:GCore.GService.GUserName">
            <summary>
            Gets and sets the Google account username.
            </summary>
        </member>
        <member name="P:GCore.GService.GPassword">
            <summary>
            Gets and sets the Google account password.
            </summary>
        </member>
        <member name="P:GCore.GService.GUrl">
            <summary>
            Gets and sets the google feeds url.
            </summary>
        </member>
        <member name="M:GCodeIssueTracker.ProjectHostingService.#ctor(System.String)">
            <summary>
            Instantiate a new <seealso cref="T:GCodeIssueTracker.ProjectHostingService"/> object.
            </summary>
            <param name="projectName">The project name.</param>
        </member>
        <member name="M:GCodeIssueTracker.ProjectHostingService.#ctor(System.String,System.String,System.String)">
            <summary>
            Instantiate a new <seealso cref="T:GCodeIssueTracker.ProjectHostingService"/> object.
            </summary>
            <param name="projectName">The project name</param>
            <param name="userName">The Google account username.</param>
            <param name="password">The Google account password.</param>
        </member>
        <member name="M:GCodeIssueTracker.ProjectHostingService.#ctor(System.String,System.String,System.String,System.Net.WebProxy)">
            <summary>
            Instantiate a new <seealso cref="T:GCodeIssueTracker.ProjectHostingService"/> object.
            </summary>
            <param name="projectName">The project name</param>
            <param name="userName">The Google account username.</param>
            <param name="password">The Google account password.</param>
            <param name="proxy">Web proxy to be used, if behind a firewall.</param>
        </member>
        <member name="M:GCodeIssueTracker.ProjectHostingService.GetAllIssues">
            <summary>
            Gets all issue for a project as a <see cref="T:GCodeIssueTracker.IssuesFeed"/> object.
            </summary>
            <returns>A <see cref="T:GCodeIssueTracker.IssuesFeed"/> object.</returns>
        </member>
        <member name="M:GCodeIssueTracker.ProjectHostingService.SubmitNewIssue(GCodeIssueTracker.IssuesEntry,System.String)">
            <summary>
            Submits new <seealso cref="T:GCodeIssueTracker.IssuesEntry"/> into the project.
            </summary>
            <param name="newEntry">A new issue entry.</param>
            <param name="applicationName">Application name invoking the submission.</param>
            <returns>A new <see cref="T:GCodeIssueTracker.IssuesEntry"/> object containing some additional data.</returns>
        </member>
        <member name="M:GCodeIssueTracker.ProjectHostingService.Query(GCore.IGQuery)">
            <summary>
            Queries the project service to get issues depending on certain query parameters.
            </summary>
            <param name="query">The data about the query paramteres.</param>
            <returns>Issues satisfying the query.</returns>
        </member>
        <member name="M:GCodeIssueTracker.ProjectHostingService.GetAllIssueComments(System.String)">
            <summary>
            Gets all comments for a particular issue.
            </summary>
            <param name="issueId">Issue id</param>
            <returns>All comments of a particular issue.</returns>
        </member>
        <member name="M:GCodeIssueTracker.ProjectHostingService.SubmitNewIssueComment(GCodeIssueTracker.Comments.IssueCommentsEntry,System.String,System.String)">
            <summary>
            Submit new comments for a particular issue.
            </summary>
            <param name="newEntry">New comment entry.</param>
            <param name="issueId">Id for the issue.</param>
            <param name="applicationName">Application which is invoking this call.</param>
            <returns></returns>
        </member>
        <member name="P:GCodeIssueTracker.ProjectHostingService.ProjectName">
            <summary>
            Gets and sets the Google Code Project name
            </summary>
        </member>
        <member name="T:GCore.Authentication.GAuthManager">
            <summary>
            Google account authentication manager class.
            </summary>
        </member>
        <member name="M:GCore.Authentication.GAuthManager.RequestClientLoginHeader(GCore.Authentication.GDataCredentials,System.String,System.String,System.Boolean,System.String,System.Net.WebProxy)">
            <summary>
            Requests a client token header for a new entry submission.
            </summary>
            <param name="gc"><see cref="T:GCore.Authentication.GDataCredentials"/> object conating the data for Google account.</param>
            <param name="serviceName">Google service name.</param>
            <param name="applicationName">Application name invoking the Google service.</param>
            <param name="fUseKeepAlive">Use keep alive connection.</param>
            <param name="clientLoginHandler">Client login url.</param>
            <param name="proxy">Web proxy to be used if behind a firewall.</param>
            <returns>A header string containing the client token required for new entry submission.</returns>
        </member>
        <member name="T:GCore.Authentication.GDataCredentials">
            <summary>
            A class to store Google account credentials.
            </summary>
        </member>
        <member name="M:GCore.Authentication.GDataCredentials.#ctor(System.String,System.String)">
            <summary>
            Instantiate a new <see cref="T:GCore.Authentication.GDataCredentials"/> object.
            </summary>
            <param name="username">The username to use.</param>
            <param name="password">The password to use.</param>
        </member>
        <member name="M:GCore.Authentication.GDataCredentials.#ctor(System.String)">
            <summary>
            Instantiate a new <see cref="T:GCore.Authentication.GDataCredentials"/> object.
            </summary>
            <param name="clientToken">The client login token to use.</param>
        </member>
        <member name="P:GCore.Authentication.GDataCredentials.Username">
            <summary>Gets and sets the username used for authentication</summary> 
            <returns> </returns>
        </member>
        <member name="P:GCore.Authentication.GDataCredentials.AccountType">
            <summary>Gets and sets the type of Account used</summary> 
            <returns> </returns>
        </member>
        <member name="P:GCore.Authentication.GDataCredentials.CaptchaToken">
            <summary>Gets and sets captcha token in case you need to handle catpcha responses for this account</summary> 
            <returns> </returns>
        </member>
        <member name="P:GCore.Authentication.GDataCredentials.CaptchaAnswer">
            <summary>Gets and sets captcha answer in case you need to handle catpcha responses for this account</summary> 
            <returns> </returns>
        </member>
        <member name="P:GCore.Authentication.GDataCredentials.Password">
            <summary>Gets and sets the Google account password.</summary> 
            <returns> </returns>
        </member>
        <member name="P:GCore.Authentication.GDataCredentials.ClientToken">
            <summary>
            Gets and sets the stored client token
            </summary>
            <returns></returns>
        </member>
        <member name="P:GCore.Authentication.GDataCredentials.NetworkCredential">
            <summary>
            Returns a Windows conforming NetworkCredential 
            </summary>
        </member>
        <member name="T:GCore.GEntry">
            <summary>
            The base Google Service feed entry class. Every Google Service feed entry must inherits this class.
            </summary>
            <remarks>
            You must add the [XmlRoot("entry", Namespace = "http://www.w3.org/2005/Atom")] attribute at top of each
            service feed entry class extending GEntry class.
            </remarks>
        </member>
        <member name="T:GCore.GObject">
            <summary>
            Base Google service object. This class is xml serializable. This class is responsible for 
            xml serialization for Google service atom feeds. <see cref="T:GCore.GFeed`1"/> and <see cref="T:GCore.GEntry"/> extends
            this class to be serializable.
            </summary>
        </member>
        <member name="T:System.Serialization.Xml.IXObject">
             <summary>
             XObject base class. Any class need to extend it to be xml serializable
             </summary>
             <example>
             <code>
             using System.Serialization;
             using System.Xml.Serialization;
             using System;
             using System.Collections.Generic;
             
             namespace Demo
             {
                [XmlRoot("RootConfig")]
                public class ConfigDemo : IXObject
                {
                        
                    [XmlElement("TestValue")]
                    public string TestValue { get; set; }
            
                    [XmlArray("TestList")]
                    public List&lt;String&gt; TestList { get; set; }
            
                    [XmlElement("LoadingTime")]
                    public DateTime LoadTime { get; set; }
            
                    [XmlElement("SavingTime")]
                    public DateTime SaveTime { get; set; }
            
                    public void Init()
                    {
                        LoadTime = DateTime.Now;
                    }
            
                    void IXObject.Close()
                    {
                        
                    }
                }
             }
             
             </code> 
             </example>
        </member>
        <member name="M:System.Serialization.Xml.IXObject.Init">
            <summary>
            Executes routines just after deserialization
            </summary>
            <remarks>
            Implements this method explicitly if you don't want to use it in the class
            </remarks>
        </member>
        <member name="M:System.Serialization.Xml.IXObject.Close">
            <summary>
            Executes routines just before serialization
            </summary>
            <remarks>
            Implements this explicitly if you don't want to use in the class
            </remarks>
        </member>
        <member name="P:System.Serialization.Xml.IXObject.DefaultNameSpace">
            <summary>
            Default Xmlnamespace to be used for all the elements
            </summary>
        </member>
        <member name="P:System.Serialization.Xml.IXObject.XmlNamespaceCollection">
            <summary>
            Additional XmlSerializerNamespaces attributes
            Put [XmlNamespaceDeclarations] before this property in the implemented class
            </summary>
        </member>
        <member name="M:GCore.GObject.Init">
            <summary>
            Executes routines just after deserialization.
            </summary>
        </member>
        <member name="M:GCore.GObject.Close">
            <summary>
            Executes routines just before serialization.
            </summary>
        </member>
        <member name="P:GCore.GObject.DefaultNameSpace">
            <summary>
            Gets and sets default xml namespace for the object.
            </summary>
        </member>
        <member name="P:GCore.GObject.XmlNamespaceCollection">
            <summary>
            Gets and sets the collection of the xml namespaces for the object.
            </summary>
        </member>
        <member name="P:GCore.GEntry.Etag">
            <summary>
            Gets and sets the Etag for the entry.
            </summary>
        </member>
        <member name="P:GCore.GEntry.IdString">
            <summary>
            Gets and sets the id of the entry.
            </summary>
        </member>
        <member name="P:GCore.GEntry.Published">
            <summary>
            Gets and sets publish date of the entry.
            </summary>
        </member>
        <member name="P:GCore.GEntry.Updated">
            <summary>
            Gets and sets the last update date of the entry.
            </summary>
        </member>
        <member name="P:GCore.GEntry.Title">
            <summary>
            Gets and sets title of the entry.
            </summary>
        </member>
        <member name="P:GCore.GEntry.Content">
            <summary>Gets and sets the content of the entry.</summary>
        </member>
        <member name="P:GCore.GEntry.Links">
            <summary>Gets and sets the list of links associated with the entry.</summary>
        </member>
        <member name="P:GCore.GEntry.Author">
            <summary>
            Gets and sets the author of the entry.
            </summary>
        </member>
        <member name="T:GCore.Author">
            <summary>
            Author of hte service feed entry
            </summary>
        </member>
        <member name="P:GCore.Author.Name">
            <summary>
            Gets and sets the name of the author.
            </summary>
        </member>
        <member name="P:GCore.Author.Uri">
            <summary>
            Gets and sets the url associated with the author.
            </summary>
        </member>
        <member name="T:GCore.Content">
            <summary>
            Contents of a service feed antry object
            </summary>
        </member>
        <member name="P:GCore.Content.Type">
            <summary>
            Gets and sets the content type.
            </summary>
        </member>
        <member name="P:GCore.Content.Description">
            <summary>
            Gets and sets the body of the content.
            </summary>
        </member>
        <member name="T:GCore.Generator">
            <summary>
            Generators of a Google service feed entry
            </summary>
        </member>
        <member name="P:GCore.Generator.Version">
            <summary>
            Gets and sets the version of the feed entry.
            </summary>
        </member>
        <member name="P:GCore.Generator.Uri">
            <summary>
            Gets and sets the uri associated with the <see cref="T:GCore.Generator"/> object.
            </summary>
        </member>
        <member name="P:GCore.Generator.Text">
            <summary>
            Gets and sets the text associated with the generator object.
            </summary>
        </member>
        <member name="T:GCore.Link">
            <summary>
            The link associated with the service feed.
            </summary>
        </member>
        <member name="P:GCore.Link.Rel">
            <summary>
            Gets and sets the rel of the link.
            </summary>
        </member>
        <member name="P:GCore.Link.Type">
            <summary>
            Gets and sets the type of the link.
            </summary>
        </member>
        <member name="P:GCore.Link.Href">
            <summary>
            Gets and sets the Href of the link.
            </summary>
        </member>
        <member name="T:GCore.GFeed`1">
            <summary>
            The base Google Service feed class. Every Google Service feed must inherits this class.
            </summary>
            <typeparam name="TEntry">The type of Atom entry for this feed.</typeparam>
            <remarks>
            You must add the [XmlRoot("feed", Namespace = "http://www.w3.org/2005/Atom")] attribute at top of each
            service feed class extending GFeed&lt;TEntry&gt; class.
            </remarks>
        </member>
        <member name="P:GCore.GFeed`1.Id">
            <summary>
            Gets and sets feed id.
            </summary>
        </member>
        <member name="P:GCore.GFeed`1.Updated">
            <summary>
            Gets and sets date for last update.
            </summary>
        </member>
        <member name="P:GCore.GFeed`1.Title">
            <summary>
            Gets and sets the title of the feed.
            </summary>
        </member>
        <member name="P:GCore.GFeed`1.Subtitle">
            <summary>
            Gets and sets the subtitle of the feeds (if any).
            </summary>
        </member>
        <member name="P:GCore.GFeed`1.Links">
            <summary>
            Gets and sets the collection of links associated with the feed.
            </summary>
        </member>
        <member name="P:GCore.GFeed`1.Generator">
            <summary>
            Gets and sets the generator of the feed.
            </summary>
        </member>
        <member name="P:GCore.GFeed`1.Entries">
            <summary>
            Gets and sets the list of <see cref="T:GCore.GEntry"/> objects of the feed.
            </summary>
        </member>
        <member name="P:GCore.GFeed`1.TotalResults">
            <summary>
            Gets and sets the total results in the feed.
            </summary>
        </member>
        <member name="P:GCore.GFeed`1.StartIndex">
            <summary>
            Gets and sets the start index of the feed.
            </summary>
        </member>
        <member name="T:GCore.Authentication.GoogleAuthentication">
            <summary>
            A class to store some important data for Google account authentication.
            </summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.ACCOUNT_PREFIX">
             <summary>Gets and sets the Google account prefix path.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.ACCOUNT_TYPE">
            <summary>Gets and sets the Google webkey identifier.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.ACCOUNT_TYPE_DEFAULT">
            <summary>Gets and sets the default value for the account type.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.AUTH_SUB_TOKEN">
            <summary>Gets and sets the Google authSub authentication token.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.AUTH_TOKEN">
            <summary>Gets and sets the Google client authentication token.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.CAPTCHA_ANSWER">
            <summary>Gets and sets the captcha url token.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.CAPTCHA_TOKEN">
            <summary>Gets and sets the default value for the account type.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.DEFAULT_DOMAIN">
            <summary>Gets and sets the default authentication domain.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.DEFAULT_PROTOCOL">
             <summary>Gets and sets the Protocol.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.EMAIL">
            <summary>Gets and sets the Google client authentication email.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.HEADER">
            <summary>Gets and sets the Google client header.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.LSID">
            <summary>Gets and sets the Google client authentication LSID.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.OVERRIDE">
            <summary>Gets and sets the Google method override header.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.PASSWORD">
            <summary>Gets and sets the Google client authentication password.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.SERVICE">
            <summary>Gets and sets the Google client authentication default service constant.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.SOURCE">
            <summary>Gets and sets the Google client authentication source constant.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.SSID">
            <summary>Gets and sets the Google client authentication SSID.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.URI_HANDLER">
            <summary>Gets and sets the Google client authentication handler.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.WEB_KEY">
            <summary>Gets and sets the Google webkey identifier.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.YOU_TUBE_CLIENT_ID">
            <summary>Gets and sets the Google YouTube client identifier.</summary>
        </member>
        <member name="F:GCore.Authentication.GoogleAuthentication.YOU_TUBE_DEV_KEY">
            <summary>Gets and sets the Google YouTube developer identifier.</summary>
        </member>
        <member name="T:GCore.IGQuery">
            <summary>
            Google Service feed query interface
            </summary>
        </member>
        <member name="M:GCore.IGQuery.GetQueryUrl">
            <summary>
            Returns the query url to the service.
            </summary>
            <returns>The query url.</returns>
        </member>
        <member name="T:GCodeIssueTracker.Comments.IssueCommentsEntry">
            <summary>
            Issue comment entry class.
            </summary>
        </member>
        <member name="M:GCodeIssueTracker.Comments.IssueCommentsEntry.Close">
            <summary>
            Adds project hosting xml namespaces before serialization.
            </summary>
        </member>
        <member name="P:GCodeIssueTracker.Comments.IssueCommentsEntry.Updates">
            <summary>
            Gets and sets updates on a particular issue comment.
            </summary>
        </member>
        <member name="T:GCodeIssueTracker.Comments.Updates">
            <summary>
            Updates of a particluar issue comment.
            </summary>
        </member>
        <member name="P:GCodeIssueTracker.Comments.Updates.CcUpdates">
            <summary>
            Gets and sets updates on cc.
            </summary>
        </member>
        <member name="P:GCodeIssueTracker.Comments.Updates.Labels">
            <summary>Gets and sets the labels.</summary>
        </member>
        <member name="P:GCodeIssueTracker.Comments.Updates.Summary">
            <summary>Gets and sets the summary of the comment.</summary>
        </member>
        <member name="P:GCodeIssueTracker.Comments.Updates.UpdateOwner">
            <summary>
            Gets and sets the owner of the update.
            </summary>
        </member>
        <member name="P:GCodeIssueTracker.Comments.Updates.Status">
            <summary>
            Gets and sets the status of the comment.
            </summary>
        </member>
        <member name="T:GCodeIssueTracker.Comments.IssueCommentsFeed">
            <summary>
            Issue comments feed class.
            </summary>
        </member>
        <member name="M:GCodeIssueTracker.Comments.IssueCommentsFeed.Close">
            <summary>
            Adds project hosting xml namespaces before serialization.
            </summary>
        </member>
        <member name="T:GCodeIssueTracker.Query.IssueQuery">
            <summary>
            Class containing all the parameter information of an issue query.
            </summary>
        </member>
        <member name="M:GCodeIssueTracker.Query.IssueQuery.#ctor">
            <summary>
            Instantiate a new <see cref="T:GCodeIssueTracker.Query.IssueQuery"/> object.
            </summary>
        </member>
        <member name="M:GCodeIssueTracker.Query.IssueQuery.GetQueryUrl">
            <summary>
            Returns the query constructed query url.
            </summary>
            <returns>Query url</returns>
        </member>
        <member name="M:GCodeIssueTracker.Query.IssueQuery.AppendQuery(GCodeIssueTracker.Query.QueryParamType,System.String)">
            <summary>
            Appends new query parameters to the query.
            </summary>
            <param name="paramType">Type of the parameter.</param>
            <param name="value">Value for the query parameter.</param>
        </member>
        <member name="T:GCodeIssueTracker.IssuesEntry">
            <summary>
            Issue entry class for the Google project hosting service.
            </summary>
        </member>
        <member name="M:GCodeIssueTracker.IssuesEntry.Close">
            <summary>
            Adds project hosting xml namespaces before serialization.
            </summary>
        </member>
        <member name="P:GCodeIssueTracker.IssuesEntry.ClosedDate">
            <summary>Gets and sets the closed date.</summary>
        </member>
        <member name="P:GCodeIssueTracker.IssuesEntry.Id">
            <summary>
            Gets and sets the id of the issue.
            </summary>
        </member>
        <member name="P:GCodeIssueTracker.IssuesEntry.Labels">
            <summary>Gets and sets the labels associated with the issue.</summary>
        </member>
        <member name="P:GCodeIssueTracker.IssuesEntry.Owner">
            <summary>Gets and sets the owner of the issue.</summary>
        </member>
        <member name="P:GCodeIssueTracker.IssuesEntry.Stars">
            <summary>Gets and sets the stars associated to the issue.</summary>
        </member>
        <member name="P:GCodeIssueTracker.IssuesEntry.State">
            <summary>Gets and sets the state of the issue.</summary>
        </member>
        <member name="P:GCodeIssueTracker.IssuesEntry.Status">
            <summary>Gets and sets the status of the issue.</summary>
        </member>
        <member name="P:GCodeIssueTracker.IssuesEntry.Ccs">
            <summary>
            Gets and sets the cc fields associated with the issue.
            </summary>
        </member>
        <member name="T:GCodeIssueTracker.Owner">
            <summary>
            Owner of the issue.
            </summary>
        </member>
        <member name="P:GCodeIssueTracker.Owner.Uri">
            <summary>Gets and sets the uri associated with the owner.</summary>
        </member>
        <member name="P:GCodeIssueTracker.Owner.UserName">
            <summary>Gets and sets the username of the owner.</summary>
        </member>
        <member name="T:GCodeIssueTracker.Cc">
            <summary>
            Cc field of the issue.
            </summary>
        </member>
        <member name="P:GCodeIssueTracker.Cc.Uri">
            <summary>Gets and sets the uri associated with the cc user.</summary>
        </member>
        <member name="P:GCodeIssueTracker.Cc.UserName">
            <summary>Gets and sets the username of the cc.</summary>
        </member>
        <member name="T:GCodeIssueTracker.IssuesFeed">
            <summary>
            Issue feed class. Contains all the issues of a particular project.
            </summary>
        </member>
        <member name="M:GCodeIssueTracker.IssuesFeed.Close">
            <summary>
            Adds project hosting xml namespaces before serialization.
            </summary>
        </member>
        <member name="T:GCodeIssueTracker.Query.QueryParamType">
            <summary>
            Different query parameter types.
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.CanAll">
            <summary>
            Canned query identifier - All issues
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.CanOpen">
            <summary>
            Canned query identifier - Open issues
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.CanOwned">
            <summary>
            Canned query identifier - Open and owned by me
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.CanReported">
            <summary>
            Canned query identifier - Open and reported by me
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.CanStarred">
            <summary>
            Canned query identifier - Open and starred by me
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.CanNew">
            <summary>
            Canned query identifier - New issues
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.CanToVerify">
            <summary>
            Canned query identifier - Issues to verify
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.Author">
            <summary>
            Author of the issue
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.Id">
            <summary>
            Id of the issue
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.Label">
            <summary>
            Label associated with the issue
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.Owner">
            <summary>
            Owner of the issue
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.PublishedDateMin">
            <summary>
            Publish date minimum limit
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.PublishedDateMax">
            <summary>
            Publish date maximum limit
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.QueryString">
            <summary>
            Search string
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.Status">
            <summary>
            Status of the issue
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.Stars">
            <summary>
            Stars associated with the issue
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.MaxResults">
            <summary>
            Maximum results per query
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.UpdatedDateMin">
            <summary>
            Last update date minimum limit
            </summary>
        </member>
        <member name="F:GCodeIssueTracker.Query.QueryParamType.UpdatedDateMax">
            <summary>
            Last update date maximum limit
            </summary>
        </member>
        <member name="T:GCore.Authentication.TokenCollection">
            <summary>
            A collection class to store string tokens.
            </summary>
        </member>
        <member name="M:GCore.Authentication.TokenCollection.#ctor(System.String,System.Char[])">
            <summary>Constructor, takes a string and a delimiter set</summary> 
        </member>
        <member name="M:GCore.Authentication.TokenCollection.#ctor(System.String,System.Char,System.Boolean,System.Int32)">
            <summary>Constructor, takes a string and a delimiter set</summary> 
        </member>
        <member name="M:GCore.Authentication.TokenCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>IEnumerable Interface Implementation</summary> 
        </member>
        <member name="M:GCore.Authentication.TokenCollection.CreateDictionary">
            <summary>
            Creates a dictionary of tokens based on this tokencollection
            </summary>
            <returns></returns>
        </member>
        <member name="M:GCore.Authentication.TokenCollection.GetEnumerator">
            <summary>IEnumerable Interface Implementation, for the noninterface</summary> 
        </member>
        <member name="T:GCore.Authentication.TokenCollection.TokenEnumerator">
            <summary>Inner class implements IEnumerator interface</summary> 
        </member>
        <member name="M:GCore.Authentication.TokenCollection.TokenEnumerator.#ctor(GCore.Authentication.TokenCollection)">
            <summary>Standard constructor</summary> 
        </member>
        <member name="M:GCore.Authentication.TokenCollection.TokenEnumerator.MoveNext">
            <summary>IEnumerable.MoveNext implementation.</summary> 
        </member>
        <member name="M:GCore.Authentication.TokenCollection.TokenEnumerator.Reset">
            <summary>IEnumerable.Reset implementation.</summary> 
        </member>
        <member name="P:GCore.Authentication.TokenCollection.TokenEnumerator.Current">
            <summary>Current implementation, non interface, type-safe</summary> 
        </member>
        <member name="P:GCore.Authentication.TokenCollection.TokenEnumerator.System#Collections#IEnumerator#Current">
            <summary>Current implementation, interface, not type-safe</summary> 
        </member>
        <member name="T:GCore.Utility">
            <summary>
            A general helper utility class for GCore library
            </summary>
        </member>
        <member name="M:GCore.Utility.ParseStreamInTokenCollection(System.IO.Stream)">
            <summary>
            Parses the stream in token collection.
            </summary>
            <param name="inputStream">The input stream.</param>
            <returns>The <see cref="T:GCore.Authentication.TokenCollection"/> object</returns>
        </member>
        <member name="M:GCore.Utility.FindToken(GCore.Authentication.TokenCollection,System.String)">
            <summary>
            Finds the specified token in the given <see cref="T:GCore.Authentication.TokenCollection"/> object
            </summary>
            <param name="tokens"><see cref="T:GCore.Authentication.TokenCollection"/> object</param>
            <param name="key">Key to find</param>
            <returns>The value associated with the key</returns>
        </member>
        <member name="M:GCore.Utility.UriEncodeUnsafe(System.String)">
            <summary>
            Encodes the given string to uri safe string
            </summary>
            <param name="content">The string to encode</param>
            <returns>The encoded string</returns>
        </member>
        <member name="M:GCore.Utility.ToFriendlyDateString(System.DateTime)">
            <summary>
            Converts a <seealso cref="T:System.DateTime"/> object into a string understandable by feed query
            </summary>
            <param name="date"><seealso cref="T:System.DateTime"/> object to format</param>
            <returns>Formatted string</returns>
        </member>
        <member name="T:System.Serialization.Xml.XObjectSerializer`1">
            <summary>
            Serializer tool to (de)serialize IXObject object
            </summary>
            <typeparam name="T">A class who implements <see cref="T:System.Serialization.Xml.IXObject"/> interface</typeparam>
        </member>
        <member name="M:System.Serialization.Xml.XObjectSerializer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Serialization.Xml.XObjectSerializer`1"/> class.
            </summary>
        </member>
        <member name="M:System.Serialization.Xml.XObjectSerializer`1.Deserialize(System.String)">
            <summary>Deserializes a xml string to an instance of T object</summary>
            <param name="xml">Xml string.</param>
            <returns>T object</returns>
        </member>
        <member name="M:System.Serialization.Xml.XObjectSerializer`1.Deserialize(System.Xml.XmlDocument)">
            <summary>Deserializes to an instance of Feed.</summary>
            <param name="doc">XmlDocument instance.</param>
            <returns>Feed result.</returns>
        </member>
        <member name="M:System.Serialization.Xml.XObjectSerializer`1.Deserialize(System.IO.TextReader)">
            <summary>Returns an instance of T object from a <see cref="T:System.IO.TextReader"/> object</summary>
            <param name="reader"><see cref="T:System.IO.TextReader"/> instance.</param>
            <returns>T object</returns>
        </member>
        <member name="M:System.Serialization.Xml.XObjectSerializer`1.Serialize(`0)">
            <summary>Serializes T object to an <see cref="T:System.Xml.XmlDocument"/> object.</summary>
            <param name="xObj">T object to serialize.</param>
            <returns>An <see cref="T:System.Xml.XmlDocument"/> instance.</returns>
        </member>
        <member name="M:System.Serialization.Xml.XObjectSerializer`1.StringSerialize(`0)">
            <summary>
            Serializes T object to a xml string
            </summary>
            <param name="xObj">T object</param>
            <returns>Xml string</returns>
        </member>
        <member name="M:System.Serialization.Xml.XObjectSerializer`1.WriterSerialize(`0)">
            <summary>
            Serializes the T object and returns a <see cref="T:System.IO.TextWriter"/> object
            </summary>
            <param name="xObj">T object</param>
            <returns><see cref="T:System.IO.TextWriter"/> object</returns>
        </member>
        <member name="M:System.Serialization.Xml.XObjectSerializer`1.ReadFile(System.String)">
            <summary>Reads object data from a xml file.</summary>
            <param name="file">Xml file name.</param>
            <returns>T object</returns>
        </member>
        <member name="M:System.Serialization.Xml.XObjectSerializer`1.WriteFile(System.String,`0)">
            <summary>Writes object data to xml file.</summary>
            <param name="file">Xml file name.</param>
            <param name="xObj">T object.</param>
        </member>
        <member name="T:TradeLink.AppKit.HelpReportCommunity">
            <summary>
            request help from community
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.HelpReportCommunity.Help(System.String)">
            <summary>
            starts a help email
            </summary>
            <param name="program"></param>
        </member>
        <member name="M:TradeLink.AppKit.HelpReportCommunity.Help(System.String,System.String)">
            <summary>
            starts a help email
            </summary>
            <param name="program"></param>
            <param name="err"></param>
        </member>
        <member name="M:TradeLink.AppKit.HelpReportCommunity.HelpLinkCommunity(System.String)">
            <summary>
            gets a help email link
            </summary>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.HelpReportCommunity.HelpLinkCommunity(System.String,System.String)">
            <summary>
            gets a help email link
            </summary>
            <param name="program"></param>
            <param name="err"></param>
            <returns></returns>
        </member>
        <member name="T:TradeLink.AppKit.Log">
            <summary>
            TradeLink logging to a file
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.Log.#ctor(System.String)">
            <summary>
            create a log
            </summary>
            <param name="program"></param>
        </member>
        <member name="M:TradeLink.AppKit.Log.#ctor(System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            create a log
            </summary>
            <param name="logname"></param>
            <param name="dateinlogname"></param>
            <param name="appendtolog"></param>
            <param name="path"></param>
            <param name="timestamps"></param>
        </member>
        <member name="M:TradeLink.AppKit.Log.GotDebug(System.String)">
            <summary>
            log something
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:TradeLink.AppKit.Log.Stop">
            <summary>
            close the log
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.Log.Date">
            <summary>
            gets current date associated with log
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.Log.FullName">
            <summary>
            full path of log file
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.Log.Content">
            <summary>
            contents of log file
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.LogViewer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.LogViewer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.LogViewer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.PopupWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.PopupWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.PopupWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TradeLink.AppKit.ResponseList">
            <summary>
            lets users choose from responses in a dll
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.ResponseList.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.ResponseList.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.ResponseList.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TradeLink.AppKit.Results">
            <summary>
            track results
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.Results.#ctor">
            <summary>
            create default results instance
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.Results.#ctor(System.Decimal,System.Decimal,System.Int32)">
            <summary>
            create results instance with risk free return, comission and report time
            </summary>
            <param name="rfr"></param>
            <param name="com"></param>
            <param name="reporttime">0 to disable reports, otherwise 16:46:00 = 164600</param>
        </member>
        <member name="M:TradeLink.AppKit.Results.GotFill(TradeLink.API.Trade)">
            <summary>
            pass fills as they arrive
            </summary>
            <param name="fill"></param>
        </member>
        <member name="M:TradeLink.AppKit.Results.GotPosition(TradeLink.API.Position)">
            <summary>
            pass new positions as they arrive
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:TradeLink.AppKit.Results.GotDebug(System.String,System.Boolean)">
            <summary>
            pass debugs to results for report generation
            </summary>
            <param name="msg"></param>
            <param name="appendtime"></param>
        </member>
        <member name="M:TradeLink.AppKit.Results.GotDebug(System.String)">
            <summary>
            pass debug messages to results for report generation
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:TradeLink.AppKit.Results.newTick(TradeLink.API.Tick)">
            <summary>
            pass ticks as they arrive (only necessary if using report time)
            </summary>
            <param name="k"></param>
        </member>
        <member name="M:TradeLink.AppKit.Results.Report">
            <summary>
            generate current report as report event
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.Results.FetchResults(System.Collections.Generic.List{TradeLink.AppKit.TradeResult},System.Decimal,System.Decimal,TradeLink.API.DebugDelegate)">
            <summary>
            get results from list of traderesults
            </summary>
            <param name="results"></param>
            <param name="RiskFreeRate"></param>
            <param name="CommissionPerContractShare"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.Results.ResultsFromTradeList(System.Collections.Generic.List{TradeLink.API.Trade},System.Decimal,System.Decimal,TradeLink.API.DebugDelegate)">
            <summary>
            get results from list of trades
            </summary>
            <param name="trades"></param>
            <param name="riskfreerate"></param>
            <param name="commissionpershare"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.Results.ToString">
            <summary>
            get string version of results table
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.Results.ToString(System.String)">
            <summary>
            get results like calc => value where '=>' is the delim
            </summary>
            <param name="delim"></param>
            <returns></returns>
        </member>
        <member name="P:TradeLink.AppKit.Results.CheckLiveAfterTickCount">
            <summary>
            wait to do live test after X ticks have arrived
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.Results.CheckLiveMaxDelaySec">
            <summary>
            if a tick is within this many seconds of current system time on same day, tick stream is considered live and reports can be sent
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.RunTracker.NEVERRUN">
            <summary>
            identifier of a build that has never been run/counted
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.RunTracker.CountNewGetStable(System.String)">
            <summary>
            count new instance of installed program and get most stable build
            </summary>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.RunTracker.CountNewGetStable(System.String,System.Int32)">
            <summary>
            count new instance of program and return number of build recognized as most used
            </summary>
            <param name="program"></param>
            <param name="build"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.RunTracker.CountNewGetPrettyRuns(System.String)">
            <summary>
            count new run and get all runs as string
            </summary>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.RunTracker.ResetRunData(System.String)">
            <summary>
            clears all run data for given program
            </summary>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.RunTracker.CountNewInstance(System.String)">
            <summary>
            count new instance of an installed program
            </summary>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.RunTracker.CountNewInstance(System.String,System.Int32)">
            <summary>
            count new instance of program and returns true if count successful
            </summary>
            <param name="program"></param>
            <param name="build"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.RunTracker.GetMostUsedBuild(System.String)">
            <summary>
            get most run build for a given program
            </summary>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.RunTracker.GetRunCount(System.Collections.Generic.List{TradeLink.AppKit.RunTracker},System.String,System.Int32)">
            <summary>
            get run count from tracked data
            </summary>
            <param name="rundata"></param>
            <param name="program"></param>
            <param name="build"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.RunTracker.GetRunCount(System.String)">
            <summary>
            get runtracker data for given program
            </summary>
            <param name="program"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.TextPrompt.Prompt(System.String,System.String)">
            <summary>
            prompt for a value
            </summary>
            <param name="caption"></param>
            <param name="prompt"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.TextPrompt.Prompt(System.String,System.String,System.String)">
            <summary>
            prompt for a value
            </summary>
            <param name="caption"></param>
            <param name="prompt"></param>
            <param name="defaultval"></param>
            <returns></returns>
        </member>
        <member name="F:TradeLink.AppKit.TextPrompt.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.TextPrompt.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.TextPrompt.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TradeLink.AppKit.Ticket">
            <summary>
            create a order ticket to prompt user for sending an order.
            returns an order that can be easily sent with SendOrder fuctions.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.Ticket.#ctor(TradeLink.API.Order)">
            <summary>
            creates ticket with default order
            </summary>
            <param name="working"></param>
        </member>
        <member name="M:TradeLink.AppKit.Ticket.newTick(TradeLink.API.Tick)">
            <summary>
            if new ticks are passed to this ticket, ticket will automatically update the price of limit and stops orders for opposing side.
            </summary>
            <param name="tick"></param>
        </member>
        <member name="M:TradeLink.AppKit.Ticket.orderStatus(System.String,System.Int32)">
            <summary>
            called by external programs to report status of an order back to the ticket
            </summary>
            <param name="symbol"></param>
            <param name="error"></param>
        </member>
        <member name="F:TradeLink.AppKit.Ticket.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.Ticket.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.Ticket.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.Ticket.WorkingOrder">
            <summary>
            gets the current value of the working order for the ticket
            </summary>
        </member>
        <member name="E:TradeLink.AppKit.Ticket.SendOrder">
            <summary>
            called when the Send button is pressed.   Working Order is automatically sent to the handler of this event
            </summary>
        </member>
        <member name="T:TradeLink.AppKit.TicketTracker">
            <summary>
            push tickets to assembla on a seperate thread, while program does other things
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.TicketTracker.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            create a ticket tracker
            </summary>
            <param name="space"></param>
            <param name="program"></param>
            <param name="user"></param>
            <param name="pw"></param>
        </member>
        <member name="M:TradeLink.AppKit.TicketTracker.#ctor">
            <summary>
            create ticket tracker
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.TicketTracker.Start">
            <summary>
            start the tracker (optional)
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.TicketTracker.Stop">
            <summary>
            stop the tracker
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.TicketTracker.Track(TradeLink.AppKit.AssemblaTicket)">
            <summary>
            submit a ticket to portal in background
            </summary>
            <param name="ticket"></param>
        </member>
        <member name="M:TradeLink.AppKit.TicketTracker.Track(System.String,System.String,TradeLink.API.Priority)">
            <summary>
            submit a ticket to portal in background
            </summary>
            <param name="summary"></param>
            <param name="description"></param>
            <param name="pri"></param>
        </member>
        <member name="M:TradeLink.AppKit.TicketTracker.Track(System.String,System.String)">
            <summary>
            submit a ticket to portal in background
            </summary>
            <param name="summary"></param>
            <param name="description"></param>
        </member>
        <member name="M:TradeLink.AppKit.TicketTracker.Track(System.String,System.String,TradeLink.API.Priority,TradeLink.API.TicketStatus)">
            <summary>
            submit a ticket to portal in background
            </summary>
            <param name="summary"></param>
            <param name="description"></param>
            <param name="pri"></param>
            <param name="stat"></param>
        </member>
        <member name="M:TradeLink.AppKit.TicketTracker.Track(System.String,System.String,System.String,System.String,System.String,TradeLink.API.Priority,TradeLink.API.TicketStatus)">
            <summary>
            submit a ticket to a given portal using a given account in the background
            </summary>
            <param name="space"></param>
            <param name="user"></param>
            <param name="password"></param>
            <param name="summary"></param>
            <param name="description"></param>
            <param name="pri"></param>
            <param name="stat"></param>
        </member>
        <member name="P:TradeLink.AppKit.TicketTracker.Space">
            <summary>
            space used by tracker
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.TicketTracker.Program">
            <summary>
            program used by tracker
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.TicketTracker.DuplicateSafetyOn">
            <summary>
            if enabled, will ignore a ticket which has same description and summary as last tracked ticket
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.TicketTracker.UnprocessedItemCount">
            <summary>
            count of unprocessed items
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.TicketTracker.AcceptedTickets">
            <summary>
            number of tickets tracked lifetime
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.TicketTracker.InterTrackSleep">
            <summary>
            wait between tracks
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.TicketTracker.PushTracksOnClose">
            <summary>
            push any untracked events when form is closed
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.TicketTracker.PushTracksCloseMax">
            <summary>
            maximum number of attempts to push tracks on close
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.TicketTracker.TrackEnabled">
            <summary>
            enable or disable tracking
            </summary>
        </member>
        <member name="T:TradeLink.AppKit.TickFileFilterControl">
            <summary>
            a GUI for building tick file filters easily.
            useful for selecting a backtesting run.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.TickFileFilterControl.#ctor">
            <summary>
            creates a tick file filter control
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.TickFileFilterControl.#ctor(System.String)">
            <summary>
            creates a tick file filter control from a tickfolder path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:TradeLink.AppKit.TickFileFilterControl.#ctor(System.String[0:,0:])">
            <summary>
            creates tickfilefilter control from an index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:TradeLink.AppKit.TickFileFilterControl.GetFilter">
            <summary>
            gets currently selected filter
            </summary>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.TickFileFilterControl.SetSymbols(System.String)">
            <summary>
            sets available symbols found in a system path
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:TradeLink.AppKit.TickFileFilterControl.SetSymbols(System.String[0:,0:])">
            <summary>
            sets available symbols from an index
            </summary>
            <param name="index"></param>
        </member>
        <member name="F:TradeLink.AppKit.TickFileFilterControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.TickFileFilterControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.TickFileFilterControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:TradeLink.AppKit.TickFileFilterControl.SendDebug">
            <summary>
            sends debug messages from control
            </summary>
        </member>
        <member name="E:TradeLink.AppKit.TickFileFilterControl.FilterUpdate">
            <summary>
            sent whenever user changes filter
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.TradeResults.Clear">
            <summary>
            clears results
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.TradeResults.ResetFiles">
            <summary>
            rediscover files in a path
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.TradeResults.remresult(System.String)">
            <summary>
            remove a result from list of results 
            (if result was loaded from file, does not delete file).
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:TradeLink.AppKit.TradeResults.isUniqueName(System.String)">
            <summary>
            determine if a result's name is unique (adding a result requires a unique name)
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:TradeLink.AppKit.TradeResults.NewResultTrades(System.String,System.Collections.Generic.List{TradeLink.API.Trade})">
            <summary>
            add a result from list of trades
            </summary>
            <param name="name"></param>
            <param name="trades"></param>
        </member>
        <member name="M:TradeLink.AppKit.TradeResults.NewResultFile(System.String)">
            <summary>
            add a result from a file
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:TradeLink.AppKit.TradeResults.DisplayResults(System.String)">
            <summary>
            change selected index
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:TradeLink.AppKit.TradeResults.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.TradeResults.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.TradeResults.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.TradeResults.Path">
            <summary>
            change path where new files are watched
            </summary>
        </member>
        <member name="P:TradeLink.AppKit.TradeResults.AutoWatch">
            <summary>
            determines whether TradeResults will automatically add/remove result
            files that show up in 'Path'
            </summary>
        </member>
        <member name="F:TradeLink.AppKit.TradeResultsWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.TradeResultsWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.TradeResultsWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:TradeLink.AppKit.Versions">
            <summary>
            display a new version popup in tradelink, which allows user to download newer version easily.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.Versions.UpgradeAlert(System.String,System.String,System.Boolean,System.Boolean,TradeLink.API.TLClient)">
            <summary>
            checks a url for all EXEs with version numbers.
            Finds highest version number and alerts if local version number is different
            </summary>
            <param name="Program"></param>
            <param name="ProgramUrl"></param>
            <param name="path"></param>
            <param name="checktradelink"></param>
            <param name="checkbrokerserver"></param>
        </member>
        <member name="M:TradeLink.AppKit.Versions.LatestVersion(System.String)">
            <summary>
            Gets latest version number of an application's exe file, when version is embedded in file name like 'MyAppName-123.exe', and can be found at URL.
            </summary>
            <param name="URL">URL of the location to get versions from</param>
            <param name="Application">application name</param>
            <returns></returns>
        </member>
        <member name="F:TradeLink.AppKit.Versions.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:TradeLink.AppKit.Versions.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:TradeLink.AppKit.Versions.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
